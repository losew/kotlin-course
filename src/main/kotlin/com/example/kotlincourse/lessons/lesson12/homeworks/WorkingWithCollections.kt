package com.example.kotlincourse.lessons.lesson12.homeworks

fun main() {
    val collection = mutableListOf(-12, 1, 6, 0, -12, -3)

//    Задачи на приведение коллекции к значению
//    1. Проверить, что размер коллекции больше 5 элементов.
    if (collection.size > 5) {
    }

//    2. Проверить, что коллекция пустая
    if (collection.isEmpty()) {
    }

//    3. Проверить, что коллекция не пустая
    if (collection.isNotEmpty()) {
    }

//    4. Взять элемент по индексу или создать значение если индекса не существует
    val item4 = collection.getOrElse(6) { collection.add(-20) }

//    5. Собрать коллекцию в строку
    val item5 = collection.joinToString(" | ")

//    6. Посчитать сумму всех значений
    val item6 = collection.sum()
    println(item6)

//    7. Посчитать среднее
    val item7 = collection.average()
    println(item7)

//    8. Взять максимальное число
    val item8 = collection.maxOrNull()
    println(item8)

//    9. Взять минимальное число
    val item9 = collection.minOrNull()
    println(item9)

//    10. Взять первое число или null
    val item10 = collection.firstOrNull()
    println(item10)

//    11. Проверить что коллекция содержит элемент
    val item11 = collection.contains(4)
    println(item11)

//    Задачи на обработку коллекций
//    12. Отфильтровать коллекцию по диапазону 18-30
    val item12 = collection.filter { it in 18..30 }

//    13. Выбрать числа, которые не делятся на 2 и 3 одновременно
    val item13 = collection.filterNot { it % 2 == 0 && it % 3 == 0 }

//    14. Очистить текстовую коллекцию от null элементов
    val collection2 = listOf(
        "One",
        null,
        "Two",
        "Three",
        "Five"
    )
    val item14 = collection2.filterNotNull()

//    15. Преобразовать текстовую коллекцию в коллекцию длин слов
    val item15 = collection2.mapNotNull { it?.length }

//    16. Преобразовать текстовую коллекцию в мапу, где ключи - перевёрнутые слова, а значения - длина слов
    val item16 = collection2
        .filterNotNull()
        .associateBy({ it.reversed() }, { it.length })

//    17. Отсортировать список в алфавитном порядке
    val item17 = collection2
        .filterNotNull()
        .sorted()

//    18. Взять первые 3 элемента списка
    val item18 = collection2.take(3)

//    19. Распечатать квадраты элементов списка
    val item19 = collection
        .map { it * it }
        .forEach { println(it) }

//    20. Группировать список по первой букве слов
    val item20 = collection2
        .filterNotNull()
        .groupBy { it.first() }

//    21. Очистить список от дублей
    val item21 = collection.distinct()
    println(item21)

//    22. Отсортировать список по убыванию
    val item22 = collection.sortedDescending()

//    23. Взять последние 3 элемента списка
    val item23 = collection.takeLast(3)

}

//    Задача 24. Характеристика числовой коллекции
//    Напиши функцию, которая принимает коллекцию чисел и возвращает строку с характеристикой коллекции используя конструкцию when
//    * Если коллекция пустая - “Пусто”
//    * Если количество элементов меньше пяти - “Короткая”
//    * Если коллекция начинается с 0 - “Стартовая”
//    * Если сумма всех чисел больше 10000 - “Массивная”
//    * Если среднее значение равно 10 - “Сбалансированная”
//    * Если длина строки образованная склеиванием коллекции в строку равна 20 - “Клейкая”
//    * Если максимальное число меньше -10 - “Отрицательная”
//    * Если минимальное число больше 1000 - “Положительная”
//    * Если содержит одновременно числа 3 и 14 - “Пи***тая”
//    * Иначе - “Уникальная”
fun CharacteristicsOfCollection(numbers: List<Int>): String {
    return when {
        numbers.isEmpty() -> "Пусто"
        numbers.size < 5 -> "Короткая"
        numbers.firstOrNull() == 0 -> "Стартовая"
        numbers.sum() > 10000 -> "Массивная"
        numbers.average().toInt() == 10 -> "Сбалансированная"
        numbers.joinToString().length == 20 -> "Клейкая"
        (numbers.maxOrNull()?:0) < -10 -> "Отрицательная"
        (numbers.minOrNull()?:0) > 1000 -> "Положительная"
        numbers.contains(3) && numbers.contains(14) -> "Пи***тая"
        else -> "Уникальная"
    }
}

//    Задача 25. Анализ учебных оценок
//    Напиши функцию, которая принимает список чисел и возвращает список чисел.
//    Пример данных: val grades = listOf(85, 58, 90, 74, 88, 67, 95, 92, 50, 42, 12)
//    Цель: Отфильтровать удовлетворительные оценки (>=60), отсортировать оставшиеся по возрастанию и взять первые 3. Вызывай методы обработки и фильтрации последовательно один из другого, чтобы результат предыдущего метода являлся основой для следующего.
val grades = listOf(85, 58, 90, 74, 88, 67, 95, 92, 50, 42, 12)
fun AnalysisAssessments(gradesTotal: List<Int>): List<Int> {
    return gradesTotal
        .filter { it >= 60 }
        .sorted()
        .take(3)
}

//???    Задача 26. Создание каталога по первой букве
//    Напиши функцию, которая принимает список строк и возвращает словарь с ключом - буквой и значением - строкой.
//    Цель: Привести все слова в списке к нижнему регистру, сгруппировать в каталог по первой букве используя метод groupBy

val list = listOf("Стол", "табурет", "ваза", "Кружка", "Зеркало", "ковер", "Шкаф", "часы", "Люстра", "подушка", "Картина", "столик", "Вазон", "шторы", "Пуф", "книга", "Фоторамка", "светильник", "Коврик", "вешалка", "Подставка", "телевизор", "Комод", "полка", "Абажур", "диван", "Кресло", "занавеска", "Бра", "пепельница", "Глобус", "статуэтка", "Поднос", "фигурка", "Ключница", "плед", "Тумба", "игрушка", "Настенные часы", "подсвечник", "Журнальный столик", "сувенир", "Корзина для белья", "посуда", "Настольная лампа", "торшер", "Этажерка")

fun catalogFirstLetter (list: List<String>): Map<Char, List<String>> {
    return list
        .map { it.lowercase() }
        .groupBy { it.first() }
}

//    Задание 27. Подсчёт средней длины слов в списке
//    Напиши функцию, которая принимает список строк и возвращает строку.
//    Начальные значения взять из предыдущей задачи.
//    Цель: Перевести все слова в количество букв, подсчитать среднее значение. Вернуть форматированный текст с двумя знаками после запятой, используя функцию format и подходящий шаблон.
fun lengthOfWords(list: List<String>): String{
    val average = list.map { it.length }.average()
    val formatted = String.format("%.2f", average)
    return formatted
}

//    Задание 28: Категоризация чисел
//    Напиши функцию, которая принимает список чисел и возвращает словарь с ключами - строками и значениями - числами.
//    Цель: Отобрать уникальные числа, отсортировать по убыванию и сгруппировать по четности (“четные” и “нечетные”).
val numbers = listOf(1, 3, 5, 7, 3, 1, 8, 9, 9, 7)

//fun CategorizationOfNumbers(list: List<Int>): Map<String>, List<Int> {
fun CategorizationOfNumbers(): Map<String, List<Int>> {
    return numbers
        .distinct()
        .sortedDescending()
        .groupBy { if (it % 2 == 0) "Четное" else "Нечетное"}
}

//    Задание 29: Поиск первого подходящего элемента
//    Напиши функцию, которая принимает список чисел и число и возвращает nullable число.
//    Начальные значения: val ages = listOf(22, 18, 30, 45, 17, null, 60) и число для проверки возраста, например 18.
//    Цель: Найти первый возраст в списке, который соответствует условию (больше второго аргумента) и вернуть его, либо null если значения не нашлось.
val ages = listOf(22, 18, 30, 45, 17, null, 60)
fun searchFirstElement(ages:List<Int?>, checkAge: Int): Int? {
    val result = ages.filterNotNull().firstOrNull() { it > checkAge }
    return result
}
